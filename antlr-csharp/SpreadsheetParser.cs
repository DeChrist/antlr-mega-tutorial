//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Spreadsheet.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class SpreadsheetParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, ASTERISK=3, SLASH=4, PLUS=5, MINUS=6, ID=7, NAME=8, NUMBER=9, 
		WHITESPACE=10;
	public const int
		RULE_expression = 0;
	public static readonly string[] ruleNames = {
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ASTERISK", "SLASH", "PLUS", "MINUS", "ID", "NAME", 
		"NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Spreadsheet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static SpreadsheetParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public SpreadsheetParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddsubExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(SpreadsheetParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(SpreadsheetParser.MINUS, 0); }
		public AddsubExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.EnterAddsubExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.ExitAddsubExp(this);
		}
	}
	public partial class ParethesisExpContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParethesisExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.EnterParethesisExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.ExitParethesisExp(this);
		}
	}
	public partial class NumericAtomExpContext : ExpressionContext {
		public ITerminalNode NUMBER() { return GetToken(SpreadsheetParser.NUMBER, 0); }
		public NumericAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.EnterNumericAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.ExitNumericAtomExp(this);
		}
	}
	public partial class MulDivExpContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(SpreadsheetParser.ASTERISK, 0); }
		public ITerminalNode SLASH() { return GetToken(SpreadsheetParser.SLASH, 0); }
		public MulDivExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.EnterMulDivExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.ExitMulDivExp(this);
		}
	}
	public partial class IdAtomExpContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(SpreadsheetParser.ID, 0); }
		public IdAtomExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.EnterIdAtomExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.ExitIdAtomExp(this);
		}
	}
	public partial class FunctionExpContext : ExpressionContext {
		public ITerminalNode NAME() { return GetToken(SpreadsheetParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionExpContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.EnterFunctionExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISpreadsheetListener typedListener = listener as ISpreadsheetListener;
			if (typedListener != null) typedListener.ExitFunctionExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new ParethesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3; Match(T__0);
				State = 4; expression(0);
				State = 5; Match(T__1);
				}
				break;
			case NAME:
				{
				_localctx = new FunctionExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7; Match(NAME);
				State = 8; Match(T__0);
				State = 9; expression(0);
				State = 10; Match(T__1);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumericAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12; Match(NUMBER);
				}
				break;
			case ID:
				{
				_localctx = new IdAtomExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 24;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 22;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MulDivExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 16;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 17;
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SLASH) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 18; expression(6);
						}
						break;
					case 2:
						{
						_localctx = new AddsubExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 19;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 20;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 21; expression(5);
						}
						break;
					}
					} 
				}
				State = 26;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\f\x1E");
		sb.Append("\x4\x2\t\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2");
		sb.Append("\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\x11\n\x2\x3\x2\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x2\x3\x2\a\x2\x19\n\x2\f\x2\xE\x2\x1C\v\x2\x3\x2\x2\x3");
		sb.Append("\x2\x3\x2\x2\x4\x3\x2\x5\x6\x3\x2\a\b!\x2\x10\x3\x2\x2\x2\x4");
		sb.Append("\x5\b\x2\x1\x2\x5\x6\a\x3\x2\x2\x6\a\x5\x2\x2\x2\a\b\a\x4\x2");
		sb.Append("\x2\b\x11\x3\x2\x2\x2\t\n\a\n\x2\x2\n\v\a\x3\x2\x2\v\f\x5\x2");
		sb.Append("\x2\x2\f\r\a\x4\x2\x2\r\x11\x3\x2\x2\x2\xE\x11\a\v\x2\x2\xF");
		sb.Append("\x11\a\t\x2\x2\x10\x4\x3\x2\x2\x2\x10\t\x3\x2\x2\x2\x10\xE\x3");
		sb.Append("\x2\x2\x2\x10\xF\x3\x2\x2\x2\x11\x1A\x3\x2\x2\x2\x12\x13\f\a");
		sb.Append("\x2\x2\x13\x14\t\x2\x2\x2\x14\x19\x5\x2\x2\b\x15\x16\f\x6\x2");
		sb.Append("\x2\x16\x17\t\x3\x2\x2\x17\x19\x5\x2\x2\a\x18\x12\x3\x2\x2\x2");
		sb.Append("\x18\x15\x3\x2\x2\x2\x19\x1C\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2");
		sb.Append("\x1A\x1B\x3\x2\x2\x2\x1B\x3\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2");
		sb.Append("\x5\x10\x18\x1A");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
