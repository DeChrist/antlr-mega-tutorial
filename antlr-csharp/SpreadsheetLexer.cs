//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Spreadsheet.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class SpreadsheetLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, ASTERISK=3, SLASH=4, PLUS=5, MINUS=6, ID=7, NAME=8, NUMBER=9, 
		WHITESPACE=10;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "LETTER", "DIGIT", "ASTERISK", "SLASH", "PLUS", "MINUS", 
		"ID", "NAME", "NUMBER", "WHITESPACE"
	};


	public SpreadsheetLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'/'", "'+'", "'-'", null, null, null, "' '"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ASTERISK", "SLASH", "PLUS", "MINUS", "ID", "NAME", 
		"NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Spreadsheet.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static SpreadsheetLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\f\x44");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3");
		sb.Append("\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x6\v\x30");
		sb.Append("\n\v\r\v\xE\v\x31\x3\f\x6\f\x35\n\f\r\f\xE\f\x36\x3\f\x3\f\x6");
		sb.Append("\f;\n\f\r\f\xE\f<\x5\f?\n\f\x3\r\x3\r\x3\r\x3\r\x2\x2\xE\x3");
		sb.Append("\x3\x5\x4\a\x2\t\x2\v\x5\r\x6\xF\a\x11\b\x13\t\x15\n\x17\v\x19");
		sb.Append("\f\x3\x2\x4\x4\x2\x43\\\x63|\x3\x2\x32;\x45\x2\x3\x3\x2\x2\x2");
		sb.Append("\x2\x5\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3");
		sb.Append("\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2");
		sb.Append("\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x3\x1B\x3\x2\x2");
		sb.Append("\x2\x5\x1D\x3\x2\x2\x2\a\x1F\x3\x2\x2\x2\t!\x3\x2\x2\x2\v#\x3");
		sb.Append("\x2\x2\x2\r%\x3\x2\x2\x2\xF\'\x3\x2\x2\x2\x11)\x3\x2\x2\x2\x13");
		sb.Append("+\x3\x2\x2\x2\x15/\x3\x2\x2\x2\x17\x34\x3\x2\x2\x2\x19@\x3\x2");
		sb.Append("\x2\x2\x1B\x1C\a*\x2\x2\x1C\x4\x3\x2\x2\x2\x1D\x1E\a+\x2\x2");
		sb.Append("\x1E\x6\x3\x2\x2\x2\x1F \t\x2\x2\x2 \b\x3\x2\x2\x2!\"\t\x3\x2");
		sb.Append("\x2\"\n\x3\x2\x2\x2#$\a,\x2\x2$\f\x3\x2\x2\x2%&\a\x31\x2\x2");
		sb.Append("&\xE\x3\x2\x2\x2\'(\a-\x2\x2(\x10\x3\x2\x2\x2)*\a/\x2\x2*\x12");
		sb.Append("\x3\x2\x2\x2+,\x5\a\x4\x2,-\x5\t\x5\x2-\x14\x3\x2\x2\x2.\x30");
		sb.Append("\x5\a\x4\x2/.\x3\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31/\x3\x2\x2");
		sb.Append("\x2\x31\x32\x3\x2\x2\x2\x32\x16\x3\x2\x2\x2\x33\x35\x5\t\x5");
		sb.Append("\x2\x34\x33\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x34\x3\x2\x2");
		sb.Append("\x2\x36\x37\x3\x2\x2\x2\x37>\x3\x2\x2\x2\x38:\a\x30\x2\x2\x39");
		sb.Append(";\x5\t\x5\x2:\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<:\x3\x2\x2\x2<=");
		sb.Append("\x3\x2\x2\x2=?\x3\x2\x2\x2>\x38\x3\x2\x2\x2>?\x3\x2\x2\x2?\x18");
		sb.Append("\x3\x2\x2\x2@\x41\a\"\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\b\r");
		sb.Append("\x2\x2\x43\x1A\x3\x2\x2\x2\a\x2\x31\x36<>\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
